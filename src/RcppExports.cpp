// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
#include "opencv_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// cvmat_bgr
XPtrMat cvmat_bgr(Rcpp::RawVector img, int width, int height);
RcppExport SEXP _image_textlinedetector_cvmat_bgr(SEXP imgSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_bgr(img, width, height));
    return rcpp_result_gen;
END_RCPP
}
// cvmat_bw
XPtrMat cvmat_bw(Rcpp::RawVector img, int width, int height);
RcppExport SEXP _image_textlinedetector_cvmat_bw(SEXP imgSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_bw(img, width, height));
    return rcpp_result_gen;
END_RCPP
}
// cvmat_rect
XPtrMat cvmat_rect(XPtrMat ptr, int x, int y, int width, int height);
RcppExport SEXP _image_textlinedetector_cvmat_rect(SEXP ptrSEXP, SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_rect(ptr, x, y, width, height));
    return rcpp_result_gen;
END_RCPP
}
// cvmat_polygon
XPtrMat cvmat_polygon(XPtrMat ptr, Rcpp::List pts, bool convex, bool crop, int color);
RcppExport SEXP _image_textlinedetector_cvmat_polygon(SEXP ptrSEXP, SEXP ptsSEXP, SEXP convexSEXP, SEXP cropSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< bool >::type convex(convexSEXP);
    Rcpp::traits::input_parameter< bool >::type crop(cropSEXP);
    Rcpp::traits::input_parameter< int >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_polygon(ptr, pts, convex, crop, color));
    return rcpp_result_gen;
END_RCPP
}
// cvmat_bitmap
Rcpp::RawVector cvmat_bitmap(XPtrMat ptr);
RcppExport SEXP _image_textlinedetector_cvmat_bitmap(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_bitmap(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cvmat_info
Rcpp::List cvmat_info(XPtrMat image);
RcppExport SEXP _image_textlinedetector_cvmat_info(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(cvmat_info(image));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_astarpath
Rcpp::List textlinedetector_astarpath(XPtrMat ptr, bool morph, int step, int mfactor, bool trace);
RcppExport SEXP _image_textlinedetector_textlinedetector_astarpath(SEXP ptrSEXP, SEXP morphSEXP, SEXP stepSEXP, SEXP mfactorSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type morph(morphSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type mfactor(mfactorSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_astarpath(ptr, morph, step, mfactor, trace));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_crop
XPtrMat textlinedetector_crop(XPtrMat ptr);
RcppExport SEXP _image_textlinedetector_textlinedetector_crop(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_crop(ptr));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_resize
XPtrMat textlinedetector_resize(XPtrMat ptr, int width);
RcppExport SEXP _image_textlinedetector_textlinedetector_resize(SEXP ptrSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_resize(ptr, width));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_binarization
XPtrMat textlinedetector_binarization(XPtrMat ptr, bool light, int type);
RcppExport SEXP _image_textlinedetector_textlinedetector_binarization(SEXP ptrSEXP, SEXP lightSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type light(lightSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_binarization(ptr, light, type));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_linesegmentation
Rcpp::List textlinedetector_linesegmentation(XPtrMat ptr, int chunksNumber, int chunksProcess, int kernelSize, int sigma, int theta);
RcppExport SEXP _image_textlinedetector_textlinedetector_linesegmentation(SEXP ptrSEXP, SEXP chunksNumberSEXP, SEXP chunksProcessSEXP, SEXP kernelSizeSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type chunksNumber(chunksNumberSEXP);
    Rcpp::traits::input_parameter< int >::type chunksProcess(chunksProcessSEXP);
    Rcpp::traits::input_parameter< int >::type kernelSize(kernelSizeSEXP);
    Rcpp::traits::input_parameter< int >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_linesegmentation(ptr, chunksNumber, chunksProcess, kernelSize, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}
// textlinedetector_wordsegmentation
Rcpp::List textlinedetector_wordsegmentation(XPtrMat ptr, int kernelSize, int sigma, int theta);
RcppExport SEXP _image_textlinedetector_textlinedetector_wordsegmentation(SEXP ptrSEXP, SEXP kernelSizeSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrMat >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type kernelSize(kernelSizeSEXP);
    Rcpp::traits::input_parameter< int >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(textlinedetector_wordsegmentation(ptr, kernelSize, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}
// sieve
std::vector<int> sieve(bool original);
RcppExport SEXP _image_textlinedetector_sieve(SEXP originalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type original(originalSEXP);
    rcpp_result_gen = Rcpp::wrap(sieve(original));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_image_textlinedetector_cvmat_bgr", (DL_FUNC) &_image_textlinedetector_cvmat_bgr, 3},
    {"_image_textlinedetector_cvmat_bw", (DL_FUNC) &_image_textlinedetector_cvmat_bw, 3},
    {"_image_textlinedetector_cvmat_rect", (DL_FUNC) &_image_textlinedetector_cvmat_rect, 5},
    {"_image_textlinedetector_cvmat_polygon", (DL_FUNC) &_image_textlinedetector_cvmat_polygon, 5},
    {"_image_textlinedetector_cvmat_bitmap", (DL_FUNC) &_image_textlinedetector_cvmat_bitmap, 1},
    {"_image_textlinedetector_cvmat_info", (DL_FUNC) &_image_textlinedetector_cvmat_info, 1},
    {"_image_textlinedetector_textlinedetector_astarpath", (DL_FUNC) &_image_textlinedetector_textlinedetector_astarpath, 5},
    {"_image_textlinedetector_textlinedetector_crop", (DL_FUNC) &_image_textlinedetector_textlinedetector_crop, 1},
    {"_image_textlinedetector_textlinedetector_resize", (DL_FUNC) &_image_textlinedetector_textlinedetector_resize, 2},
    {"_image_textlinedetector_textlinedetector_binarization", (DL_FUNC) &_image_textlinedetector_textlinedetector_binarization, 3},
    {"_image_textlinedetector_textlinedetector_linesegmentation", (DL_FUNC) &_image_textlinedetector_textlinedetector_linesegmentation, 6},
    {"_image_textlinedetector_textlinedetector_wordsegmentation", (DL_FUNC) &_image_textlinedetector_textlinedetector_wordsegmentation, 4},
    {"_image_textlinedetector_sieve", (DL_FUNC) &_image_textlinedetector_sieve, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_image_textlinedetector(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
